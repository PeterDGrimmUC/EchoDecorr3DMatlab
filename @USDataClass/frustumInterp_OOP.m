%3D Interpolation function for frustum-shaped volume
function res = frustumInterp_OOP(obj,Isph,dmu,dnu)
global p LR Lmu Lnu iR imu inu R0 
Icart = zeros(size(R0));

for ip = 1:length(p)
   q = p(ip);
   
   % differences to be used below, trying to save a few flops
   drmLR = obj.dr-LR(q);
   dmumLmu = dmu-Lmu(q);
   dnumLnu = dnu-Lnu(q);
   Icart(q) = Isph(iR(q),imu(q),inu(q)) ...
                * drmLR * dmumLmu * dnumLnu + ...
              Isph(iR(q)+1,imu(q),inu(q)) ...
                * LR(q) * dmumLmu * dnumLnu + ...
              Isph(iR(q),imu(q)+1,inu(q)) ...
                * drmLR * Lmu(q) * dnumLnu + ...
              Isph(iR(q),imu(q),inu(q)+1) ...
                * drmLR * dmumLmu * Lnu(q) + ...
              Isph(iR(q)+1,imu(q),inu(q)+1) ...
                * LR(q) * dmumLmu * Lnu(q) + ...
              Isph(iR(q),imu(q)+1,inu(q)+1) ...
                * drmLR * Lmu(q) * Lnu(q) + ...
              Isph(iR(q)+1,imu(q)+1,inu(q)) ...
                * LR(q) * Lmu(q) * dnumLnu + ...
              Isph(iR(q)+1,imu(q)+1,inu(q)) ...
                * LR(q) * Lmu(q) * Lnu(q);
end
res = Icart/(obj.dr*dmu*dnu);